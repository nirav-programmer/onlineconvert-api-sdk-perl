#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::InputApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

our @EXPORT_OK = qw(
  jobs_job_id_input_get 
  jobs_job_id_input_post 
  jobs_job_id_input_file_id_get 
  jobs_job_id_input_file_id_delete 
  
);

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

    
    #
    # jobs_job_id_input_get
    #
    # Get list of binary source files for the conversion.hhh
    # 
    # @param string $x_oc_token Token for authentication for the current job (required)
    # @param string $x_oc_api_key Api key for the user to filter. (required)
    # @param string $job_id ID of job that needs to be fetched (required)
    # @return ARRAY[InputFile]
    #
    sub jobs_job_id_input_get {
      my ($self, %args) = @_;

      
      # verify the required parameter 'job_id' is set
      unless (exists $args{'job_id'}) {
        croak("Missing the required parameter 'job_id' when calling jobs_job_id_input_get");
      }
      

      # parse inputs
      my $_resource_path = '/jobs/{job_id}/input';
      $_resource_path =~ s/{format}/json/; # default format to json

      my $_method = 'GET';
      my $query_params = {};
      my $header_params = {};
      my $form_params = {};

      # 'Accept' and 'Content-Type' header
      my $_header_accept = $self->{api_client}->select_header_accept();
      if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
      }
      $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

      
      # header params
      if ( exists $args{'x_oc_token'}) {
        $header_params->{'X-Oc-Token'} = $self->{api_client}->to_header_value($args{'x_oc_token'});
      }# header params
      if ( exists $args{'x_oc_api_key'}) {
        $header_params->{'X-Oc-Api-Key'} = $self->{api_client}->to_header_value($args{'x_oc_api_key'});
      }
      # path params
      if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }
      
      my $_body_data;
      

      # authentication setting, if any
      my $auth_settings = [];

      # make the API Call
      my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                             $query_params, $form_params,
                                             $header_params, $_body_data, $auth_settings);
      if (!$response) {
        return;
      }
      my $_response_object = $self->{api_client}->deserialize('ARRAY[InputFile]', $response);
      return $_response_object;
      
  }
  
    #
    # jobs_job_id_input_post
    #
    # Cretes a new input for the current job.
    # 
    # @param InputFile $body  (required)
    # @param string $x_oc_token Token for authentication for the current job (required)
    # @param string $x_oc_api_key Api key for the user to filter. (required)
    # @param string $job_id ID of job that needs to be fetched (required)
    # @return InputFile
    #
    sub jobs_job_id_input_post {
      my ($self, %args) = @_;

      
      # verify the required parameter 'job_id' is set
      unless (exists $args{'job_id'}) {
        croak("Missing the required parameter 'job_id' when calling jobs_job_id_input_post");
      }
      

      # parse inputs
      my $_resource_path = '/jobs/{job_id}/input';
      $_resource_path =~ s/{format}/json/; # default format to json

      my $_method = 'POST';
      my $query_params = {};
      my $header_params = {};
      my $form_params = {};

      # 'Accept' and 'Content-Type' header
      my $_header_accept = $self->{api_client}->select_header_accept();
      if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
      }
      $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

      
      # header params
      if ( exists $args{'x_oc_token'}) {
        $header_params->{'X-Oc-Token'} = $self->{api_client}->to_header_value($args{'x_oc_token'});
      }# header params
      if ( exists $args{'x_oc_api_key'}) {
        $header_params->{'X-Oc-Api-Key'} = $self->{api_client}->to_header_value($args{'x_oc_api_key'});
      }
      # path params
      if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }
      
      my $_body_data;
      # body params
      if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
      }

      # authentication setting, if any
      my $auth_settings = [];

      # make the API Call
      my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                             $query_params, $form_params,
                                             $header_params, $_body_data, $auth_settings);
      if (!$response) {
        return;
      }
      my $_response_object = $self->{api_client}->deserialize('InputFile', $response);
      return $_response_object;
      
  }
  
    #
    # jobs_job_id_input_file_id_get
    #
    # Get list of conversions defined for the current job.
    # 
    # @param string $x_oc_token Token for authentication for the current job (required)
    # @param string $x_oc_api_key Api key for the user to filter. (required)
    # @param string $job_id ID of job that needs to be fetched (required)
    # @param string $file_id Id of the file to download (required)
    # @return InputFile
    #
    sub jobs_job_id_input_file_id_get {
      my ($self, %args) = @_;

      
      # verify the required parameter 'job_id' is set
      unless (exists $args{'job_id'}) {
        croak("Missing the required parameter 'job_id' when calling jobs_job_id_input_file_id_get");
      }
      
      # verify the required parameter 'file_id' is set
      unless (exists $args{'file_id'}) {
        croak("Missing the required parameter 'file_id' when calling jobs_job_id_input_file_id_get");
      }
      

      # parse inputs
      my $_resource_path = '/jobs/{job_id}/input/{file_id}';
      $_resource_path =~ s/{format}/json/; # default format to json

      my $_method = 'GET';
      my $query_params = {};
      my $header_params = {};
      my $form_params = {};

      # 'Accept' and 'Content-Type' header
      my $_header_accept = $self->{api_client}->select_header_accept();
      if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
      }
      $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

      
      # header params
      if ( exists $args{'x_oc_token'}) {
        $header_params->{'X-Oc-Token'} = $self->{api_client}->to_header_value($args{'x_oc_token'});
      }# header params
      if ( exists $args{'x_oc_api_key'}) {
        $header_params->{'X-Oc-Api-Key'} = $self->{api_client}->to_header_value($args{'x_oc_api_key'});
      }
      # path params
      if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }# path params
      if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }
      
      my $_body_data;
      

      # authentication setting, if any
      my $auth_settings = [];

      # make the API Call
      my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                             $query_params, $form_params,
                                             $header_params, $_body_data, $auth_settings);
      if (!$response) {
        return;
      }
      my $_response_object = $self->{api_client}->deserialize('InputFile', $response);
      return $_response_object;
      
  }
  
    #
    # jobs_job_id_input_file_id_delete
    #
    # Removes the input for a job.
    # 
    # @param string $x_oc_token Token for authentication for the current job (required)
    # @param string $x_oc_api_key Api key for the user to filter. (required)
    # @param string $job_id ID of job that needs to be fetched (required)
    # @param string $file_id Id of the file to download (required)
    # @return InputFile
    #
    sub jobs_job_id_input_file_id_delete {
      my ($self, %args) = @_;

      
      # verify the required parameter 'job_id' is set
      unless (exists $args{'job_id'}) {
        croak("Missing the required parameter 'job_id' when calling jobs_job_id_input_file_id_delete");
      }
      
      # verify the required parameter 'file_id' is set
      unless (exists $args{'file_id'}) {
        croak("Missing the required parameter 'file_id' when calling jobs_job_id_input_file_id_delete");
      }
      

      # parse inputs
      my $_resource_path = '/jobs/{job_id}/input/{file_id}';
      $_resource_path =~ s/{format}/json/; # default format to json

      my $_method = 'DELETE';
      my $query_params = {};
      my $header_params = {};
      my $form_params = {};

      # 'Accept' and 'Content-Type' header
      my $_header_accept = $self->{api_client}->select_header_accept();
      if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
      }
      $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

      
      # header params
      if ( exists $args{'x_oc_token'}) {
        $header_params->{'X-Oc-Token'} = $self->{api_client}->to_header_value($args{'x_oc_token'});
      }# header params
      if ( exists $args{'x_oc_api_key'}) {
        $header_params->{'X-Oc-Api-Key'} = $self->{api_client}->to_header_value($args{'x_oc_api_key'});
      }
      # path params
      if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }# path params
      if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
      }
      
      my $_body_data;
      

      # authentication setting, if any
      my $auth_settings = [];

      # make the API Call
      my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                             $query_params, $form_params,
                                             $header_params, $_body_data, $auth_settings);
      if (!$response) {
        return;
      }
      my $_response_object = $self->{api_client}->deserialize('InputFile', $response);
      return $_response_object;
      
  }
  


1;
